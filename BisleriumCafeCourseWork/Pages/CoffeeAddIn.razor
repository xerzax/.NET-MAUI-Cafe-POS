@page "/coffeeaddin"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager navManager

<div class="p-3">
<div class="row mt-3 mb-3 ">

	<div class="col-6">
		<h3 class="color-coffee">Add In Name</h3>
	</div>
		<!-- visible only to admin -->
	<div class="col-6 text-end">
		@if (_globalState.CurrentUser?.Role == Role.Admin)
		{
			<button class="btn btn-primary " type="button" @onclick="OpenAddInDialog">
					<i class="bi bi-plus-circle"></i> &nbsp; Add an add in to your coffee
			</button>
		}
	</div>

	@* add in creation modal box *@
	@if (_showAddInDialog)
	{
		<ModalDialog Title="@_dialogTitle" OkLabel="@_dialogOkLabel" OnClose="@CreateOrEditAddIn">
				<EditForm Model="_addInModel">
					<DataAnnotationsValidator />

					<div class="mb-3">
						<label for="addInName" class="form-label">Add In Name</label>
						<InputText id="addInName" class="form-control" @bind-Value="_addInModel.Name" placeholder="Enter add in type" />
						<ValidationMessage For="@(() => _addInModel.Name)" />
					</div>
					<div class="mb-3">
						<label for="addInPrice" class="form-label">Price</label>
						<InputNumber id="addInPrice" class="form-control" @bind-Value="_addInModel.Price" placeholder="Enter the price of add in" />
						<ValidationMessage For="@(() => _addInModel.Price)" />
					</div>
				</EditForm>

			@if (!string.IsNullOrEmpty(_coffeeAddInErrorMessage))
			{
				<ErrorMessage Type="danger" Message="@_coffeeAddInErrorMessage" />
			}
		</ModalDialog>
	}
	@*  Password confirmation modal dialog  *@
	@if ( _showPasswordDialog)
	{
		
		<ModalDialog Title="@_dialogTitle" OnClose="@CheckPassword" OkLabel="@_dialogOkLabel">			
				<div class="mb-3">
					<label for="pw" class="form-label">Password</label>
					<input id="pw" type="password" class="form-control" @bind="_password" placeholder="Enter special password" />
				</div>
				@if (!string.IsNullOrEmpty(_passwordErrorMessage))
				{
					<ErrorMessage Type="danger" Message="@_passwordErrorMessage" />
				}

		</ModalDialog>
		
	}

		<!-- Delete add-in confirmation modal dialog -->
	@if (_showDeleteAddInDialog)
		{
				
			<ModalDialog Title="@_dialogTitle" OnClose="@OnDeleteAddInDialogClose" OkLabel="@_dialogOkLabel">

				<p>Are you sure you want to delete <strong>@_addInModel.Name</strong>?</p>

				@if (!string.IsNullOrEmpty(_deleteAddInErrorMessage))
				{
					<ErrorMessage Type="danger" Message="@_deleteAddInErrorMessage" />
				}
			</ModalDialog>
		}
</div>

	<!-- Table displaying coffee add-ins -->
<table class="table table-striped ">
	<thead>
		<tr>
			<th>S.No</th>
			<th>Type</th>
			<th>Price</th>
			<th>CreatedBy</th>
			<th>Actions</th>
		</tr>
	</thead>
	<tbody>
		@{
			IEnumerable<CoffeeAddIns> coffees = _coffeeAddIn;

			int sno = 1;

			foreach (var coffee in coffees)
			{
				<tr>
					<td>@sno</td>
					<td>@coffee.Name</td>
					<td><b>NPR.</b>@coffee.Price</td>
					<td>
						@{
							var creator = UserService.GetById(coffee.CreatedBy);
							<span>@(creator == null ? "Administration" : creator.Username)</span>
						}
					</td>
					<td class="d-flex">
						<button class="btn btn-outline-danger me-2" type="button" @onclick="()=>OpenDeleteAddinDialog(coffee)">
								<i class="bi bi-trash3"></i> &nbsp; Delete
						</button>
							@if (_globalState.CurrentUser.Role == Role.Admin)
							{
								<button class="btn btn-outline-success" type="button" @onclick="()=>OpenAddPasswordDialog(coffee)">
									<i class="bi bi-pencil"></i> &nbsp; Edit
								</button>
							}
						
					</td>
				</tr>
				sno++;
			}
		}
	</tbody>
</table>
</div>


@code {
	// Component properties and state
	[CascadingParameter]
	private GlobalState _globalState { get; set; }

	private List<CoffeeAddIns> _coffeeAddIn { get; set; }

	private string _dialogTitle { get; set; }

	private string _dialogOkLabel { get; set; }

	private string _password = "";

	private bool _isPasswordValid = false;




	private string _coffeeAddInErrorMessage { get; set; }
	private string _passwordErrorMessage { get; set; }


	private string _deleteAddInErrorMessage { get; set; }
	private bool _showAddInDialog = false;
	private bool _showDeleteAddInDialog = false;
	private bool _showPasswordDialog = false;


	private string _tabFilter = "All";

	private string _sortBy = "product";

	private string _sortDirection = "ascending";

	private string _addInPath = UtilityService.GetAppCoffeeAddInsFilePath();

	private CoffeeAddIns _addInModel { get; set; }


	protected override void OnInitialized()
	{
		_coffeeAddIn = AddOnService.GetAll(_addInPath);
	}


	private void OpenAddInDialog()
	{
		_dialogTitle = "Add a new coffee add-in";
		_dialogOkLabel = "Add";
		_addInModel = new CoffeeAddIns
			{
				Id = Guid.Empty
			};
		_showAddInDialog = true;
	}
	private void OpenAddPasswordDialog(CoffeeAddIns addIn)
	{
		_dialogTitle = "Add Password";
		_dialogOkLabel = "Confirm";
		_addInModel = new CoffeeAddIns
			{
				Id = addIn.Id,
				Name = addIn.Name,
				Price = addIn.Price
			};

		_showPasswordDialog = true;
	}

	private void OpenDeleteAddinDialog(CoffeeAddIns addin)
	{
		_dialogTitle = "Delete Add In";
		_dialogOkLabel = "Confirm";
		_addInModel = new CoffeeAddIns
			{
				Id = addin.Id,
				Name = addin.Name
			};
		_showDeleteAddInDialog = true;
	}
	private void OnDeleteAddInDialogClose(bool isClosed)
	{
		if (isClosed)
		{

			_showDeleteAddInDialog = false;

			_addInModel = null;
		}
		else
		{
			try
			{
				_deleteAddInErrorMessage = "";

				_coffeeAddIn = AddOnService.Delete(_addInModel.Id);

				_showDeleteAddInDialog = false;

				_addInModel = null;
			}
			catch (Exception e)
			{
				_deleteAddInErrorMessage = e.Message;

				Console.WriteLine(e.Message);
			}
		}
	}

	private void CheckPassword(bool isClosed)
	{
		if (isClosed)
		{
			_showPasswordDialog = false;
			_passwordErrorMessage = "";
			_password = "";

		}
		else
		{
			try
			{
				_passwordErrorMessage = "";
				_isPasswordValid = UserService.CheckAdminPassword(_password);
				if (_isPasswordValid)
				{
					_showPasswordDialog = false;
					_showAddInDialog = true;
					_password = "";
					_dialogTitle = "Edit Add In";


				}
			}
			catch(Exception e)
			{
				_showPasswordDialog = true;
				_passwordErrorMessage = "Invalid Password";
				Console.WriteLine(e.Message);
			}
		}
	}

	private void CreateOrEditAddIn(bool isClosed)
	{
		if (isClosed)
		{
			_showAddInDialog = false;
		}
		else
		{
			try
			{
				_coffeeAddInErrorMessage = "";
				if (_addInModel.Id == Guid.Empty)
				{
					// Create new add-in
					_coffeeAddIn = AddOnService.Create(_globalState.CurrentUser.Id, _addInModel.Name, _addInModel.Price);
				}
				else
				{
					// Edit existing add-in
					_coffeeAddIn = AddOnService.Edit(_addInModel.Id, _addInModel.Name, _addInModel.Price);
				}
				_showAddInDialog = false;
			}
			catch (Exception e)
			{
				_coffeeAddInErrorMessage = e.Message;
				Console.WriteLine(e.Message);
			}
		}
	}



}
